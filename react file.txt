import React, { useState } from 'react';
import { Sun, Moon, Globe, ArrowRight, Users, Home, Dumbbell, Calendar, MapPin, Mail, Lock, User } from 'lucide-react';

const SignUpForm = ({ isDarkMode }) => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form submitted:', formData);
  };

  return (
    <div className="max-w-md w-full mx-auto space-y-4">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <label className={`block text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
            Full Name
          </label>
          <div className="relative">
            <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
            <input
              type="text"
              className={`pl-10 w-full p-3 rounded-lg ${
                isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'
              } border ${isDarkMode ? 'border-gray-600' : 'border-gray-300'}`}
              placeholder="John Doe"
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            />
          </div>
        </div>

        <div className="space-y-2">
          <label className={`block text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
            Email
          </label>
          <div className="relative">
            <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
            <input
              type="email"
              className={`pl-10 w-full p-3 rounded-lg ${
                isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'
              } border ${isDarkMode ? 'border-gray-600' : 'border-gray-300'}`}
              placeholder="john@example.com"
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
            />
          </div>
        </div>

        <div className="space-y-2">
          <label className={`block text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
            Password
          </label>
          <div className="relative">
            <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
            <input
              type="password"
              className={`pl-10 w-full p-3 rounded-lg ${
                isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'
              } border ${isDarkMode ? 'border-gray-600' : 'border-gray-300'}`}
              placeholder="••••••••"
              onChange={(e) => setFormData({ ...formData, password: e.target.value })}
            />
          </div>
        </div>

        <button
          type="submit"
          className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors"
        >
          Create Account
        </button>
      </form>
    </div>
  );
};

const MapComponent = () => {
  return (
    <div className="w-full h-[400px] bg-blue-100 rounded-xl shadow-lg flex items-center justify-center">
      <MapPin size={40} className="text-blue-500" />
    </div>
  );
};

const ConnectifyApp = () => {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState('English');
  const [currentPage, setCurrentPage] = useState('home');
  
  const languages = [
    "English",
    "हिंदी",
    "ಕನ್ನಡ",
    "తెలుగు",
    "தமிழ்"
  ];

  const features = [
    {
      icon: Users,
      title: "Find Your Team",
      description: "Connect with like-minded individuals for hackathons, projects, and events"
    },
    {
      icon: Home,
      title: "Perfect Roommate",
      description: "Discover compatible roommates based on your lifestyle and preferences"
    },
    {
      icon: Dumbbell,
      title: "Fitness Partners",
      description: "Match with workout buddies who share your fitness goals and schedule"
    },
    {
      icon: Calendar,
      title: "Event Companions",
      description: "Never miss a social event because you can't find company"
    }
  ];

  const renderContent = () => {
    switch (currentPage) {
      case 'signup':
        return (
          <div className="pt-24 pb-16">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              <div className="text-center mb-12">
                <h2 className={`text-3xl font-bold mb-4 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                  Create Your Account
                </h2>
                <p className={`text-lg ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                  Join our community and start connecting with others
                </p>
              </div>
              <SignUpForm isDarkMode={isDarkMode} />
            </div>
          </div>
        );
      
      default:
        return (
          <>
            <div className="pt-24 pb-8 md:pt-32">
              <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="text-center">
                  <h1 className={`text-4xl md:text-6xl font-bold mb-6 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                    Find Your Perfect Match for Every Activity
                  </h1>
                  <p className={`text-xl md:text-2xl mb-8 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                    Connect with like-minded individuals for living, fitness, events, and more
                  </p>
                  <div className="flex flex-col sm:flex-row justify-center gap-4">
                    <button 
                      className="px-8 py-4 rounded-lg bg-blue-600 hover:bg-blue-700 text-white font-medium flex items-center justify-center"
                      onClick={() => setCurrentPage('explore')}
                    >
                      Explore Partners <ArrowRight className="ml-2" size={20} />
                    </button>
                    <button 
                      onClick={() => setCurrentPage('signup')}
                      className={`px-8 py-4 rounded-lg ${
                        isDarkMode 
                          ? 'bg-gray-800 hover:bg-gray-700 text-white' 
                          : 'bg-gray-100 hover:bg-gray-200 text-gray-900'
                      } font-medium`}
                    >
                      Get Started
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <div className="py-16">
              <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
                  {features.map((feature, index) => {
                    const FeatureIcon = feature.icon;
                    return (
                      <div 
                        key={index}
                        className={`p-6 rounded-xl ${
                          isDarkMode 
                            ? 'bg-gray-800 hover:bg-gray-700' 
                            : 'bg-white hover:shadow-lg'
                        } transition-all duration-300`}
                      >
                        <FeatureIcon 
                          size={40} 
                          className={`mb-4 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} 
                        />
                        <h3 className={`text-xl font-semibold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                          {feature.title}
                        </h3>
                        <p className={`${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                          {feature.description}
                        </p>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>

            <div className={`py-16 ${isDarkMode ? 'bg-gray-800' : 'bg-gray-50'}`}>
              <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="text-center mb-8">
                  <h2 className={`text-3xl font-bold mb-4 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                    Discover Partners Near You
                  </h2>
                  <p className={`text-lg ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                    Find and connect with people in your area
                  </p>
                </div>
                <MapComponent />
              </div>
            </div>
          </>
        );
    }
  };

  return (
    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-white'}`}>
      <nav className={`fixed w-full z-10 ${isDarkMode ? 'bg-gray-800' : 'bg-white'} shadow-sm`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-blue-600'}`}>
              Connectify
            </div>
            
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setIsDarkMode(!isDarkMode)}
                className={`p-2 rounded-full ${isDarkMode ? 'bg-gray-700 text-yellow-400' : 'bg-gray-100 text-gray-600'}`}
              >
                {isDarkMode ? <Sun size={20} /> : <Moon size={20} />}
              </button>
              
              <div className="relative group">
                <button className={`flex items-center space-x-2 p-2 rounded-lg ${isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`}>
                  <Globe size={20} className={isDarkMode ? 'text-white' : 'text-gray-600'} />
                  <span className={isDarkMode ? 'text-white' : 'text-gray-600'}>{currentLanguage}</span>
                </button>
                
                <div className={`absolute right-0 mt-2 w-48 rounded-md shadow-lg ${isDarkMode ? 'bg-gray-800' : 'bg-white'} ring-1 ring-black ring-opacity-5 hidden group-hover:block`}>
                  {languages.map((lang) => (
                    <button
                      key={lang}
                      onClick={() => setCurrentLanguage(lang)}
                      className={`block w-full text-left px-4 py-2 text-sm ${
                        isDarkMode 
                          ? 'text-gray-100 hover:bg-gray-700' 
                          : 'text-gray-700 hover:bg-gray-100'
                      }`}
                    >
                      {lang}
                    </button>
                  ))}
                </div>
              </div>
              
              <button
                onClick={() => setCurrentPage('signup')}
                className="px-4 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white"
              >
                Get Started
              </button>
            </div>
          </div>
        </div>
      </nav>

      {renderContent()}
    </div>
  );
};

export default ConnectifyApp;